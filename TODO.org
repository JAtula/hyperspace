* TODO Remove Coquette
* DONE Accurate client/server time and latency measurements (try to piggyback on WebSocket pings?)
* DONE Calculate actual elapsed time when doing physics, instead of fixed interval
* TODO Ship colors - generate different colors for ships server side, sync in data
* DONE Asteroids flying around (spawn with size and velocity -- for bonus points, make them spin)
* TODO Ship drift/velocity
* TODO Move stars server side
* TODO More star variety/constellations
* TODO Update diffs
* DONE Server-side collision detection
* TODO Client-side collision detection
* TODO Missiles hitting things
* TODO Health
* TODO Asteroids splitting (predetermined chunk sizes and ids?)
* DONE Client disconnect -> death/disappear
* TODO Better ids for projectiles
* TODO Large game map, viewports with smart data sync
* DONE Prediction, interpolation, lag compensation, etc
* TODO Profiling/benchmarking
* TODO Health bars
* TODO Death detection
* TODO Score
* TODO Death animation
* TODO Spawn animation
* TODO Minimap/radar and/or arrows indication direction to off-screen enemies
* DONE Use gopherjs (https://github.com/gopherjs/gopherjs) to sync game object construct and simulation logic? (not doing it)
* DONE JSON stringify update message before sending to each client (not doing it -- now we have last event id)
* TODO Wrap-around map? (probably won't have time for view-ports)
* DONE Try new heartbeat-request-update model
* DONE Use SMA for clock diff
* TODO Compare msgpack, LZW encoding, protobuf (create some sample data with a few ships, a bunch of projectiles & asteroids)
* DONE Fix deletion of dead objects -- either auto-delete after X seconds, or track last-synced timestamp of each connected client, and maintain a "low water mark" in game, pass that into history on tick so it knows what it can cull
* TODO Split collision detection into a separate step after all positions have been updated
